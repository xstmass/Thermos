++++ REJECTED PATCH 40
 
             try
             {
-                itemstack = packetbuffer.readItemStackFromBuffer();
+                push = packetbuffer.readItemStackFromBuffer();
 
-                if (itemstack == null)
+                if (push == null)
                 {
                     return;
                 }
 
-                if (!ItemWritableBook.func_150930_a(itemstack.getTagCompound()))
+                if (!ItemWritableBook.func_150930_a(push.getTagCompound()))
                 {
                     throw new IOException("Invalid book tag!");
                 }
 
-                itemstack1 = this.playerEntity.inventory.getCurrentItem();
+                stack = this.playerEntity.inventory.getCurrentItem();
 
-                if (itemstack1 != null)
+                if (stack != null)
                 {
-                    if (itemstack.getItem() == Items.writable_book && itemstack.getItem() == itemstack1.getItem())
+                    if (push.getItem() == Items.writable_book && push.getItem() == stack.getItem() && push.getEnchantmentTagList().equals(stack.getEnchantmentTagList()))
                     {
-                        itemstack1.setTagInfo("pages", itemstack.getTagCompound().getTagList("pages", 8));
+                        nouveau = stack.copy();
+                        ItemWritableBook.shadowUpdate(nouveau, push, false);
+                        CraftEventFactory.handleEditBookEvent(playerEntity, nouveau); // CraftBukkit
+                        this.playerEntity.inventory.setInventorySlotContents(this.playerEntity.inventory.currentItem, nouveau);
                     }
+                    else
+                    {
+                        throw new RuntimeException("Bogey book-user! Stop using AllUWant");
+                    }
 
                     return;
                 }
             }
-            catch (Exception exception4)
+            // CraftBukkit start
+            catch (Throwable throwable)
             {
-                logger.error("Couldn\'t handle book info", exception4);
-                return;
+                logger.error("Couldn\'t handle book info", throwable);
+                if (throwable instanceof RuntimeException && !(throwable instanceof IOException))
+                {
+                    this.kickPlayerFromServer(throwable.getMessage());
+                }
+                else
+                {
+                    this.kickPlayerFromServer("Invalid book data!");
+                }
+                // CraftBukkit end
             }
             finally
             {
++++ END PATCH
++++ REJECTED PATCH 41
 
             try
             {
-                itemstack = packetbuffer.readItemStackFromBuffer();
+                push = packetbuffer.readItemStackFromBuffer();
 
-                if (itemstack != null)
+                if (push != null)
                 {
-                    if (!ItemEditableBook.validBookTagContents(itemstack.getTagCompound()))
+                    if (!ItemEditableBook.validBookTagContents(push.getTagCompound()))
                     {
                         throw new IOException("Invalid book tag!");
                     }
 
-                    itemstack1 = this.playerEntity.inventory.getCurrentItem();
+                    stack = this.playerEntity.inventory.getCurrentItem();
 
-                    if (itemstack1 == null)
+                    if (stack == null)
                     {
                         return;
                     }
 
-                    if (itemstack.getItem() == Items.written_book && itemstack1.getItem() == Items.writable_book)
+                    if (push.getItem() == Items.written_book && stack.getItem() == Items.writable_book)
                     {
-                        itemstack1.setTagInfo("author", new NBTTagString(this.playerEntity.getCommandSenderName()));
-                        itemstack1.setTagInfo("title", new NBTTagString(itemstack.getTagCompound().getString("title")));
-                        itemstack1.setTagInfo("pages", itemstack.getTagCompound().getTagList("pages", 8));
-                        itemstack1.func_150996_a(Items.written_book);
+                        nouveau = stack.copy();
+                        nouveau.setTagInfo("author", new NBTTagString(this.playerEntity.getCommandSenderName()));
+                        ItemWritableBook.shadowUpdate(nouveau, push, true);
+                        CraftEventFactory.handleEditBookEvent(playerEntity, nouveau); // CraftBukkit
+                        this.playerEntity.inventory.setInventorySlotContents(this.playerEntity.inventory.currentItem, nouveau);
                     }
 
                     return;
                 }
             }
-            catch (Exception exception3)
+            // CraftBukkit start
+            catch (Throwable throwable)
             {
-                logger.error("Couldn\'t sign book", exception3);
-                return;
+                logger.error("Couldn\'t sign book", throwable);
+                if (throwable instanceof RuntimeException && !(throwable instanceof IOException))
+                {
+                    this.kickPlayerFromServer(throwable.getMessage());
+                }
+                else
+                {
+                    this.kickPlayerFromServer("Invalid book data!");
+                }
+                // CraftBukkit end
             }
             finally
             {
++++ END PATCH
