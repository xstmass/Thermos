--- ../src-base/minecraft/net/minecraft/world/chunk/storage/RegionFile.java
+++ ../src-work/minecraft/net/minecraft/world/chunk/storage/RegionFile.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.chunk.storage;
 
 import java.io.BufferedInputStream;
+import java.io.BufferedOutputStream;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.DataInputStream;
@@ -9,66 +10,65 @@
 import java.io.IOException;
 import java.io.RandomAccessFile;
 import java.util.ArrayList;
+import java.util.List;
 import java.util.zip.DeflaterOutputStream;
 import java.util.zip.GZIPInputStream;
 import java.util.zip.InflaterInputStream;
+
+import com.google.common.collect.Lists;
+
+import net.minecraft.nbt.CompressedStreamTools;
+import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.server.MinecraftServer;
+import thermos.ThermosConfig;
 
 public class RegionFile
 {
-    private static final byte[] emptySector = new byte[4096];
+    // Minecraft is limited to 256 sections per chunk. So 1MB. This can easily be override.
+    // So we extend this to use the REAL size when the count is maxed by seeking to that section and reading the length.
+    private static final boolean FORGE_ENABLE_EXTENDED_SAVE = net.minecraft.server.MinecraftServer.thermosConfig.enable_oversizedchunk.getValue();
+    private static final byte[] EMPTY_SECTOR = new byte[4096];
     private final File fileName;
     private RandomAccessFile dataFile;
     private final int[] offsets = new int[1024];
     private final int[] chunkTimestamps = new int[1024];
-    private ArrayList sectorFree;
+    private List<Boolean> sectorFree;
     private int sizeDelta;
     private long lastModified;
-    private static final String __OBFID = "CL_00000381";
 
-    public RegionFile(File p_i2001_1_)
+    public RegionFile(File fileNameIn)
     {
-        this.fileName = p_i2001_1_;
+        this.fileName = fileNameIn;
         this.sizeDelta = 0;
 
         try
         {
-            if (p_i2001_1_.exists())
+            if (fileNameIn.exists())
             {
-                this.lastModified = p_i2001_1_.lastModified();
+                this.lastModified = fileNameIn.lastModified();
             }
 
-            this.dataFile = new RandomAccessFile(p_i2001_1_, "rw");
-            int i;
+            this.dataFile = new RandomAccessFile(fileNameIn, "rw");
 
             if (this.dataFile.length() < 4096L)
             {
-                for (i = 0; i < 1024; ++i)
-                {
-                    this.dataFile.writeInt(0);
-                }
-
-                for (i = 0; i < 1024; ++i)
-                {
-                    this.dataFile.writeInt(0);
-                }
-
+                this.dataFile.write(EMPTY_SECTOR);
+                this.dataFile.write(EMPTY_SECTOR);
                 this.sizeDelta += 8192;
             }
 
             if ((this.dataFile.length() & 4095L) != 0L)
             {
-                for (i = 0; (long)i < (this.dataFile.length() & 4095L); ++i)
+                for (int i = 0; (long)i < (this.dataFile.length() & 4095L); ++i)
                 {
                     this.dataFile.write(0);
                 }
             }
 
-            i = (int)this.dataFile.length() / 4096;
-            this.sectorFree = new ArrayList(i);
-            int j;
+            int i1 = (int)this.dataFile.length() / 4096;
+            this.sectorFree = Lists.<Boolean>newArrayListWithCapacity(i1);
 
-            for (j = 0; j < i; ++j)
+            for (int j = 0; j < i1; ++j)
             {
                 this.sectorFree.add(Boolean.valueOf(true));
             }
@@ -76,26 +76,40 @@
             this.sectorFree.set(0, Boolean.valueOf(false));
             this.sectorFree.set(1, Boolean.valueOf(false));
             this.dataFile.seek(0L);
-            int k;
 
-            for (j = 0; j < 1024; ++j)
+            for (int j1 = 0; j1 < 1024; ++j1)
             {
-                k = this.dataFile.readInt();
-                this.offsets[j] = k;
-
-                if (k != 0 && (k >> 8) + (k & 255) <= this.sectorFree.size())
+                int k = this.dataFile.readInt();
+                this.offsets[j1] = k;
+                // Spigot start
+                int length = k & 255;
+                if (length == 255)
                 {
-                    for (int l = 0; l < (k & 255); ++l)
+                    // We're maxed out, so we need to read the proper length from the section
+                    if ((k >> 8) <= this.sectorFree.size()) {
+                        this.dataFile.seek((k >> 8) * 4096);
+                        length = (this.dataFile.readInt() + 4)/ 4096 + 1;
+                        this.dataFile.seek(j1 * 4 + 4); //Go back to where we were
+                    }
+                }
+                if (k != 0 && (k >> 8) + length <= this.sectorFree.size())
+                {
+                    for (int l = 0; l < length; ++l)
                     {
+                        // Spigot end
                         this.sectorFree.set((k >> 8) + l, Boolean.valueOf(false));
                     }
                 }
+                else if (length > 0)
+                    cpw.mods.fml.common.FMLLog.warning("Invalid chunk: (%s, %s) Offset: %s Length: %s runs off end file. %s", j1 % 32, (int)(j1 / 32), k >> 8, length, fileNameIn);
+
             }
 
-            for (j = 0; j < 1024; ++j)
+
+            for (int k1 = 0; k1 < 1024; ++k1)
             {
-                k = this.dataFile.readInt();
-                this.chunkTimestamps[j] = k;
+                int l1 = this.dataFile.readInt();
+                this.chunkTimestamps[k1] = l1;
             }
         }
         catch (IOException ioexception)
@@ -104,42 +118,15 @@
         }
     }
 
-    // This is a copy (sort of) of the method below it, make sure they stay in sync
     public synchronized boolean chunkExists(int x, int z)
     {
-        if (this.outOfBounds(x, z)) return false;
-
-        try
-        {
-            int offset = this.getOffset(x, z);
-
-            if (offset == 0) return false;
-
-            int sectorNumber = offset >> 8;
-            int numSectors = offset & 255;
-
-            if (sectorNumber + numSectors > this.sectorFree.size()) return false;
-
-            this.dataFile.seek((long)(sectorNumber * 4096));
-            int length = this.dataFile.readInt();
-
-            if (length > 4096 * numSectors || length <= 0) return false;
-
-            byte version = this.dataFile.readByte();
-
-            if (version == 1 || version == 2) return true;
-        }
-        catch (IOException ioexception)
-        {
-            return false;
-        }
-
-        return false;
+        return isChunkSaved(x, z);
     }
 
-    public synchronized DataInputStream getChunkDataInputStream(int p_76704_1_, int p_76704_2_)
+
+    public synchronized DataInputStream getChunkDataInputStream(int x, int z)
     {
-        if (this.outOfBounds(p_76704_1_, p_76704_2_))
+        if (this.outOfBounds(x, z))
         {
             return null;
         }
@@ -147,48 +134,53 @@
         {
             try
             {
-                int k = this.getOffset(p_76704_1_, p_76704_2_);
+                int i = this.getOffset(x, z);
 
-                if (k == 0)
+                if (i == 0)
                 {
                     return null;
                 }
                 else
                 {
-                    int l = k >> 8;
-                    int i1 = k & 255;
-
-                    if (l + i1 > this.sectorFree.size())
+                    int j = i >> 8;
+                    int k = i & 255;
+                    // Spigot start
+                    if (k == 255)
                     {
+                        this.dataFile.seek(j * 4096);
+                        k = (this.dataFile.readInt() + 4) / 4096 + 1;
+                    }
+                    // Spigot end
+                    if (j + k > this.sectorFree.size())
+                    {
                         return null;
                     }
                     else
                     {
-                        this.dataFile.seek((long)(l * 4096));
-                        int j1 = this.dataFile.readInt();
+                        this.dataFile.seek((long)(j * 4096));
+                        int l = this.dataFile.readInt();
 
-                        if (j1 > 4096 * i1)
+                        if (l > 4096 * k)
                         {
                             return null;
                         }
-                        else if (j1 <= 0)
+                        else if (l <= 0)
                         {
                             return null;
                         }
                         else
                         {
                             byte b0 = this.dataFile.readByte();
-                            byte[] abyte;
 
                             if (b0 == 1)
                             {
-                                abyte = new byte[j1 - 1];
-                                this.dataFile.read(abyte);
-                                return new DataInputStream(new BufferedInputStream(new GZIPInputStream(new ByteArrayInputStream(abyte))));
+                                byte[] abyte1 = new byte[l - 1];
+                                this.dataFile.read(abyte1);
+                                return new DataInputStream(new BufferedInputStream(new GZIPInputStream(new ByteArrayInputStream(abyte1))));
                             }
                             else if (b0 == 2)
                             {
-                                abyte = new byte[j1 - 1];
+                                byte[] abyte = new byte[l - 1];
                                 this.dataFile.read(abyte);
                                 return new DataInputStream(new BufferedInputStream(new InflaterInputStream(new ByteArrayInputStream(abyte))));
                             }
@@ -200,107 +192,113 @@
                     }
                 }
             }
-            catch (IOException ioexception)
+            catch (IOException var9)
             {
                 return null;
             }
         }
     }
 
-    public DataOutputStream getChunkDataOutputStream(int p_76710_1_, int p_76710_2_)
+    public DataOutputStream getChunkDataOutputStream(int x, int z)
     {
-        return this.outOfBounds(p_76710_1_, p_76710_2_) ? null : new DataOutputStream(new DeflaterOutputStream(new RegionFile.ChunkBuffer(p_76710_1_, p_76710_2_)));
+        return this.outOfBounds(x, z) ? null : new DataOutputStream(new BufferedOutputStream(new DeflaterOutputStream(new ChunkBuffer(x, z))));
     }
 
-    protected synchronized void write(int p_76706_1_, int p_76706_2_, byte[] p_76706_3_, int p_76706_4_)
+    protected synchronized void write(int x, int z, byte[] data, int length)
     {
         try
         {
-            int l = this.getOffset(p_76706_1_, p_76706_2_);
-            int i1 = l >> 8;
-            int j1 = l & 255;
-            int k1 = (p_76706_4_ + 5) / 4096 + 1;
+        	
+            int i = this.getOffset(x, z);
+            int j = i >> 8;
+            int k = i & 255;
+			// Spigot start
+            if (k == 255)
+            {
+                this.dataFile.seek(j * 4096);
+                k = (this.dataFile.readInt() + 4) / 4096 + 1;
+            }
+			// Spigot end
+            int l = (length + 5) / 4096 + 1;
 
-            if (k1 >= 256)
+            if (l >= 256)
             {
-                return;
+            	cpw.mods.fml.common.FMLLog.info("OversizedChunk (%s, %s)", x, z);
+               if (!FORGE_ENABLE_EXTENDED_SAVE) return;
             }
 
-            if (i1 != 0 && j1 == k1)
+            if (j != 0 && k == l)
             {
-                this.write(i1, p_76706_3_, p_76706_4_);
+                this.write(j, data, length);
             }
             else
             {
-                int l1;
-
-                for (l1 = 0; l1 < j1; ++l1)
+                for (int i1 = 0; i1 < k; ++i1)
                 {
-                    this.sectorFree.set(i1 + l1, Boolean.valueOf(true));
+                    this.sectorFree.set(j + i1, Boolean.valueOf(true));
                 }
 
-                l1 = this.sectorFree.indexOf(Boolean.valueOf(true));
-                int i2 = 0;
-                int j2;
+                int l1 = this.sectorFree.indexOf(Boolean.valueOf(true));
+                int j1 = 0;
 
                 if (l1 != -1)
                 {
-                    for (j2 = l1; j2 < this.sectorFree.size(); ++j2)
+                    for (int k1 = l1; k1 < this.sectorFree.size(); ++k1)
                     {
-                        if (i2 != 0)
+                        if (j1 != 0)
                         {
-                            if (((Boolean)this.sectorFree.get(j2)).booleanValue())
+                            if (((Boolean)this.sectorFree.get(k1)).booleanValue())
                             {
-                                ++i2;
+                                ++j1;
                             }
                             else
                             {
-                                i2 = 0;
+                                j1 = 0;
                             }
                         }
-                        else if (((Boolean)this.sectorFree.get(j2)).booleanValue())
+                        else if (((Boolean)this.sectorFree.get(k1)).booleanValue())
                         {
-                            l1 = j2;
-                            i2 = 1;
+                            l1 = k1;
+                            j1 = 1;
                         }
 
-                        if (i2 >= k1)
+                        if (j1 >= l)
                         {
                             break;
                         }
                     }
                 }
 
-                if (i2 >= k1)
+                if (j1 >= l)
                 {
-                    i1 = l1;
-                    this.setOffset(p_76706_1_, p_76706_2_, l1 << 8 | k1);
+                    j = l1;
+                    this.setOffset(x, z, l1 << 8 | (l > 255 ? 255 : l)); // Spigot
 
-                    for (j2 = 0; j2 < k1; ++j2)
+                    for (int j2 = 0; j2 < l; ++j2)
                     {
-                        this.sectorFree.set(i1 + j2, Boolean.valueOf(false));
+                        this.sectorFree.set(j + j2, Boolean.valueOf(false));
                     }
 
-                    this.write(i1, p_76706_3_, p_76706_4_);
+                    this.write(j, data, length);
                 }
                 else
                 {
                     this.dataFile.seek(this.dataFile.length());
-                    i1 = this.sectorFree.size();
+                    j = this.sectorFree.size();
 
-                    for (j2 = 0; j2 < k1; ++j2)
+                    for (int i2 = 0; i2 < l; ++i2)
                     {
-                        this.dataFile.write(emptySector);
+                        this.dataFile.write(EMPTY_SECTOR);
                         this.sectorFree.add(Boolean.valueOf(false));
                     }
 
-                    this.sizeDelta += 4096 * k1;
-                    this.write(i1, p_76706_3_, p_76706_4_);
-                    this.setOffset(p_76706_1_, p_76706_2_, i1 << 8 | k1);
+                    this.sizeDelta += 4096 * l;
+                    this.write(j, data, length);
+                    this.setOffset(x, z, j << 8 | (l > 255 ? 255 : l)); // Spigot
                 }
             }
 
-            this.setChunkTimestamp(p_76706_1_, p_76706_2_, (int)(MinecraftServer.getSystemTimeMillis() / 1000L));
+            this.setChunkTimestamp(x, z, (int)(MinecraftServer.getSystemTimeMillis() / 1000L));
         }
         catch (IOException ioexception)
         {
@@ -308,41 +306,41 @@
         }
     }
 
-    private void write(int p_76712_1_, byte[] p_76712_2_, int p_76712_3_) throws IOException
+    private void write(int sectorNumber, byte[] data, int length) throws IOException
     {
-        this.dataFile.seek((long)(p_76712_1_ * 4096));
-        this.dataFile.writeInt(p_76712_3_ + 1);
+        this.dataFile.seek((long)(sectorNumber * 4096));
+        this.dataFile.writeInt(length + 1);
         this.dataFile.writeByte(2);
-        this.dataFile.write(p_76712_2_, 0, p_76712_3_);
+        this.dataFile.write(data, 0, length);
     }
 
-    private boolean outOfBounds(int p_76705_1_, int p_76705_2_)
+    private boolean outOfBounds(int x, int z)
     {
-        return p_76705_1_ < 0 || p_76705_1_ >= 32 || p_76705_2_ < 0 || p_76705_2_ >= 32;
+        return x < 0 || x >= 32 || z < 0 || z >= 32;
     }
 
-    private int getOffset(int p_76707_1_, int p_76707_2_)
+    private int getOffset(int x, int z)
     {
-        return this.offsets[p_76707_1_ + p_76707_2_ * 32];
+        return this.offsets[x + z * 32];
     }
 
-    public boolean isChunkSaved(int p_76709_1_, int p_76709_2_)
+    public boolean isChunkSaved(int x, int z)
     {
-        return this.getOffset(p_76709_1_, p_76709_2_) != 0;
+        return this.getOffset(x, z) != 0;
     }
 
-    private void setOffset(int p_76711_1_, int p_76711_2_, int p_76711_3_) throws IOException
+    private void setOffset(int x, int z, int offset) throws IOException
     {
-        this.offsets[p_76711_1_ + p_76711_2_ * 32] = p_76711_3_;
-        this.dataFile.seek((long)((p_76711_1_ + p_76711_2_ * 32) * 4));
-        this.dataFile.writeInt(p_76711_3_);
+        this.offsets[x + z * 32] = offset;
+        this.dataFile.seek((long)((x + z * 32) * 4));
+        this.dataFile.writeInt(offset);
     }
 
-    private void setChunkTimestamp(int p_76713_1_, int p_76713_2_, int p_76713_3_) throws IOException
+    private void setChunkTimestamp(int x, int z, int timestamp) throws IOException
     {
-        this.chunkTimestamps[p_76713_1_ + p_76713_2_ * 32] = p_76713_3_;
-        this.dataFile.seek((long)(4096 + (p_76713_1_ + p_76713_2_ * 32) * 4));
-        this.dataFile.writeInt(p_76713_3_);
+        this.chunkTimestamps[x + z * 32] = timestamp;
+        this.dataFile.seek((long)(4096 + (x + z * 32) * 4));
+        this.dataFile.writeInt(timestamp);
     }
 
     public void close() throws IOException
@@ -355,15 +353,14 @@
 
     class ChunkBuffer extends ByteArrayOutputStream
     {
-        private int chunkX;
-        private int chunkZ;
-        private static final String __OBFID = "CL_00000382";
+        private final int chunkX;
+        private final int chunkZ;
 
-        public ChunkBuffer(int p_i2000_2_, int p_i2000_3_)
+        public ChunkBuffer(int x, int z)
         {
             super(8096);
-            this.chunkX = p_i2000_2_;
-            this.chunkZ = p_i2000_3_;
+            this.chunkX = x;
+            this.chunkZ = z;
         }
 
         public void close() throws IOException