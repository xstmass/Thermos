--- ../src-base/minecraft/org/bukkit/command/defaults/VersionCommand.java
+++ ../src-work/minecraft/org/bukkit/command/defaults/VersionCommand.java
@@ -3,7 +3,11 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
+import net.minecraft.entity.player.EntityPlayerMP;
+import net.minecraftforge.common.ForgeVersion;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -24,48 +28,26 @@
         this.setAliases(Arrays.asList("ver", "about"));
     }
 
+    public Map<String, String> a = new ConcurrentHashMap<String, String>();
+
     @Override
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!testPermission(sender)) return true;
 
         if (args.length == 0) {
-            sender.sendMessage("This server is running " + Bukkit.getName() + " version " + Bukkit.getVersion() + " (Implementing API version " + Bukkit.getBukkitVersion() + ")");
+            sender.sendMessage("This server is running " + Bukkit.getName() + " version " + Bukkit.getVersion() + " (Implementing API version " + Bukkit.getBukkitVersion() + ", Forge version " + ForgeVersion.getVersion() + ")");
         } else {
-            StringBuilder name = new StringBuilder();
 
-            for (String arg : args) {
-                if (name.length() > 0) {
-                    name.append(' ');
-                }
-
-                name.append(arg);
+            if (true) {
+                sender.sendMessage("This server is not running any plugins.");
             }
-
-            String pluginName = name.toString();
-            Plugin exactPlugin = Bukkit.getPluginManager().getPlugin(pluginName);
-            if (exactPlugin != null) {
-                describeToSender(exactPlugin, sender);
-                return true;
-            }
-
-            boolean found = false;
-            pluginName = pluginName.toLowerCase();
-            for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
-                if (plugin.getName().toLowerCase().contains(pluginName)) {
-                    describeToSender(plugin, sender);
-                    found = true;
-                }
-            }
-
-            if (!found) {
-                sender.sendMessage("This server is not running any plugin by that name.");
-                sender.sendMessage("Use /plugins to get a list of plugins.");
-            }
         }
         return true;
     }
 
     private void describeToSender(Plugin plugin, CommandSender sender) {
+   sender.sendMessage("Author: Fracica");
+/*
         PluginDescriptionFile desc = plugin.getDescription();
         sender.sendMessage(ChatColor.GREEN + desc.getName() + ChatColor.WHITE + " version " + ChatColor.GREEN + desc.getVersion());
 
@@ -84,12 +66,12 @@
                 sender.sendMessage("Authors: " + getAuthors(desc));
             }
         }
+*/
     }
 
     private String getAuthors(final PluginDescriptionFile desc) {
-        StringBuilder result = new StringBuilder();
-        List<String> authors = desc.getAuthors();
-
+        return "Fracica";
+/*
         for (int i = 0; i < authors.size(); i++) {
             if (result.length() > 0) {
                 result.append(ChatColor.WHITE);
@@ -105,7 +87,7 @@
             result.append(authors.get(i));
         }
 
-        return result.toString();
+        return result.toString();*/
     }
 
     @Override
@@ -113,9 +95,10 @@
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(args, "Arguments cannot be null");
         Validate.notNull(alias, "Alias cannot be null");
-
-        if (args.length == 1) {
             List<String> completions = new ArrayList<String>();
+       completions.add("None");return completions;
+
+/*        if (args.length == 1) {
             String toComplete = args[0].toLowerCase();
             for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
                 if (StringUtil.startsWithIgnoreCase(plugin.getName(), toComplete)) {
@@ -124,6 +107,6 @@
             }
             return completions;
         }
-        return ImmutableList.of();
+        return ImmutableList.of();*/
     }
 }
